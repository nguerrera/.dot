;; -*- lexical-binding: t; -*-
;; See lisp/ng-*.el for the main configuration
;;
;; init.el's responsibilities:
;;
;; 1. Bootstrap https://github.com/jwiegley/use-package
;;
;; 2. Load day-to-day manual configuration from lisp/ng-*.el
;;
;; 3. Redirect automatically generated custom loading
;;
;; 4. Cache package load path to avoid running slow
;;    (package-initialize) when configuration hasn't changed.
;;
;; Performance optimization techniques inspired by:
;;
;; * https://github.com/nilcons/emacs-use-package-fast
;;
;;   But we don't bother with byte compilation, which is cumbersome
;;   and didn't make a dent for me in practice. Instead, write out a
;;   plain text lock file to remember the load path from a prior
;;   initialization.
;;
;; *  https://blog.d46.us/advanced-emacs-startup
;;
;;   Startup time logging lifted and GC prevention borrowed from
;;   there.

;; Mimic Emacs 27+ initialization order by loading early-init.el
;; straight away on older versions. This file disables package
;; initialization on startup and removes scroll bar, menu bar, and
;; tool bar. The former has to be done there on Emacs 27+, and the
;; latter is much faster when done there on Emacs 27+.
(if (< emacs-major-version 27)
    (load "~/.emacs.d/early-init.el"))

(defvar ng-early-init-file "~/.emacs.d/lisp/ng-early-init.el"
  "The configuration file where package-archives are set and any
other configuration that would like to happen early before we
potentially hit the network.")

(defvar ng-init-file  "~/.emacs.d/lisp/ng-init.el"
  "The configuration file where most things are done and
use-package calls can be made.")

(defvar ng-package-lock-file "~/.emacs.d/elpa/ng-package-lock.el"
  "The generated file where package load-paths are cached to be
reused when the config files have not changed.")

(defun ng-write-package-lock-file ()
  "Save package-alist to lock file"
  (setq package-selected-packages (mapcar #'car package-alist))
  (let ((package-dir (file-truename package-user-dir)))
    (with-temp-file ng-package-lock-file
      (insert ";; This file is automatically generated to speed up package")
      (insert " loading when the configuration hasn't changed.\n")
      (insert "(setq package-selected-packages '")
      (print package-selected-packages (current-buffer))
      (insert ")\n")
      (insert "(setq package-alist '")
      (print package-alist (current-buffer))
      (insert ")\n")
      (dolist (pkg package-alist)
        (insert (format "(push \"%s\" load-path)\n"
                        (package-desc-dir (cadr pkg)) load-path))))))

(defun ng-load-package-lock-file ()
  "Restore package-alist and load-path from lock file and adds
package directories to load-path."
  (setq use-package-always-ensure nil)
  (advice-add 'use-package-handler/:pin :around 'ng-disable-pin-advice)
  (load ng-package-lock-file))

(defun ng-disable-pin-advice (orig name keyword archive-name rest state)
  "Advice around use-package-handler/:pin to prevent slow package
initialization when loading from lock file. Lock file is bound to
specific versions so :pin logic is not needed."
  (use-package-process-keywords name rest state))

(defun ng-package-lock-file-up-to-date-p ()
  "Determine if lock file is up to date with configuration"
  (and (file-exists-p ng-package-lock-file)
       (file-newer-than-file-p ng-package-lock-file ng-early-init-file)
       (file-newer-than-file-p ng-package-lock-file ng-init-file)))

(defun ng-package-initialize ()
  "Prepare package system from lock file if up to date, or boot
using package.el if it's not."
  (if (ng-package-lock-file-up-to-date-p)
      (ng-load-package-lock-file)
    (delete-file ng-package-lock-file)
    (setq use-package-always-ensure t)
    (require 'package)
    (package-initialize)
    (unless (package-installed-p 'use-package)
      (package-refresh-contents)
      (package-install 'use-package))))

(defun ng-package-save ()
  "If this init did a full restore, save the lock file to speed
up future inits."
  (if use-package-always-ensure
      (ng-write-package-lock-file)))

;; Set up load paths
(add-to-list 'load-path "~/.emacs.d/lisp")
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes")

;; Don't save selected packages to custom file. A selected package in
;; this config is one that has been pulled in by a use-package.
;; Everything else is one-off experimentation that can be cleaned up
;; by package-autoremove. We save package-selected-packages to the
;; lock file instead of the custom file.
(advice-add 'package--save-selected-packages :around (lambda (&rest r)))

;; Keep generated config in its own file (loaded at the end of this file)
(setq custom-file "~/.emacs.d/custom.el")

;; Log startup time
;; Use a hook so the message doesn't get clobbered by other messages.
(add-hook
 'emacs-startup-hook
 (lambda ()
   (message
    "Startup Time: %.2f seconds"
    (float-time (time-subtract after-init-time before-init-time)))))

;; Do the init dance.
;;
;; Temporarily use a 10 MB GC threshold and disable special file name
;; handling to speed things up.
(let ((gc-cons-threshold (* 10 1000 1000))
      (file-name-handler-alist nil))
  (load ng-early-init-file)
  (ng-package-initialize)
  (load ng-init-file)
  (ng-package-save)
  (load custom-file))

;; Now that we're done, reset things so that new packages can be added
;; to config file and changes can be tested with C-x C-e as they would
;; run on restart where lock file would be out of date.
(setq use-package-always-ensure t)
(advice-remove 'use-package-handler/:pin 'ng-disable-pin-advice)
